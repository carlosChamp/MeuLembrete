@using MeuLembrete.Core.Model;
@using MeuLembrete.Core.CalculadoraStrategy;
@using MeuLembrete.Core.Services;
@using MeuLembrete.Core.Util;
@using MeuLembrete.Shared.LembreteComponents;

@inject CalculadoraAlertas CalculadoraAlertas;
@inject LembreteCachedRepository LembreteCached;

<table class="calendar">
    <thead>
        <tr class="bg-primary text-white">
            @for (int j = 0; j <= 6; j++)
            {
                <th>@(((DiaDaSemana)j).ToDescription())</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int week = 0; week <= semanasDoMes; week++)
        {
            <tr>
                @for (int diaDaSemana = 0; diaDaSemana <= 6; diaDaSemana++)
                {
                    var posicaoDiaNaLista = calcularDiaPelaPosicaoCalendario(week, diaDaSemana);
                    if (posicaoDiaNaLista < listaDeDiasNaTela.Count)
                    {
                        <td @key="listaDeDiasNaTela[posicaoDiaNaLista]"
                            class="@getTdClassForMonth(listaDeDiasNaTela[posicaoDiaNaLista].Item1)"
                            data-dataSelecionada="@posicaoDiaNaLista"
                        @onclick="() => selecionaDia(posicaoDiaNaLista)">
                            <div class="cal-dia">@listaDeDiasNaTela[posicaoDiaNaLista].Item1.Day</div>
                            <div class="clearfix"></div>
                            <div class="cal-dia-detalhe">

                                @foreach (Lembrete lembrete in listaDeDiasNaTela[posicaoDiaNaLista].Item2)
                                {
                                    <div class="badge rounded-pill marcador" style="background-color: @lembrete.Cor">
                                        @lembrete.Tag
                                    </div>
                                }

                            </div>
                        </td>
                    }
                    else
                    {
                        <td></td>
                    }
                }
            </tr>
        }
    </tbody>
</table>
<div class="row">
    <div class="col-12">

        <fieldset>
            <legend>Lembretes na data</legend>
            <LembreteList Lembretes="listaLembreteNoDia"></LembreteList>

        </fieldset>
    </div>

    <p></p>
</div>
@code {

    private const double NUMERO_DE_DIAS_DA_SEMANA = 7;
    DateTime diaInicial;
    DateTime diaFinal;
    int semanasDoMes;
    int offsetmes;
    List<(DateTime, IEnumerable<Lembrete>)> listaDeDiasNaTela;
    IEnumerable<Lembrete> listaLembreteNoDia;

    private string getTdClassForMonth(DateTime data)
    {
        string classList = string.Empty; 
        if(data < DateTime.Today)
        {
            classList = "opacity-50 ";
        }
        classList += (data.Month != MesSelecionado.Month) ? "faded" : "active";
        return classList; 
    }

    private int calcularDiaPelaPosicaoCalendario(int semana, int diaSemana)
    {
        return ((semana * (int)NUMERO_DE_DIAS_DA_SEMANA) + diaSemana);
    }

    private void ConfigurarGridCalendario()
    {
        offsetmes = (int)MesSelecionado.DayOfWeek;
        diaInicial = MesSelecionado.Date;
        diaFinal = MesSelecionado.Date.AddMonths(1).AddDays(-1);
        semanasDoMes = (int)Math.Ceiling((diaFinal.Day + offsetmes) / NUMERO_DE_DIAS_DA_SEMANA);
        listaDeDiasNaTela = new List<(DateTime, IEnumerable<Lembrete>)>();
        for (DateTime diaInicialNaTela = diaInicial.AddDays(-offsetmes); diaInicialNaTela <= diaFinal; diaInicialNaTela = diaInicialNaTela.AddDays(1))
        {
            IEnumerable<Lembrete> lembretesNaData = CalculadoraAlertas.RetornarLembretesNaDataReferencia(LembreteCached.LembretesCache, diaInicialNaTela.Date, false);
            listaDeDiasNaTela.Add((diaInicialNaTela, lembretesNaData));
        }
    }

    [Parameter]
    public DateTime MesSelecionado
    {
        get; set;
    }

    public DateTime DataSelecionada { get; set; }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        ConfigurarGridCalendario();
        StateHasChanged();
    }

    void selecionaDia(int week, int diaSeamana)
    {
        int diaSelecionado = calcularDiaPelaPosicaoCalendario(week, diaSeamana);
        if (diaSelecionado > listaDeDiasNaTela.Count)
            return;
        listaLembreteNoDia = listaDeDiasNaTela[diaSelecionado].Item2;
    }

    void selecionaDia(int diaSelecionado)
    {
        // int diaSelecionado = calcularDiaPelaPosicaoCalendario(week, diaSeamana);
        if (diaSelecionado > listaDeDiasNaTela.Count)
            return;
        listaLembreteNoDia = listaDeDiasNaTela[diaSelecionado].Item2;
    }

}
